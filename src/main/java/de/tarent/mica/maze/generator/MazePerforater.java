package de.tarent.mica.maze.generator;

import java.util.List;

import de.tarent.mica.maze.model.Coord;
import de.tarent.mica.maze.model.Field;
import de.tarent.mica.maze.model.Maze;
import de.tarent.mica.maze.model.Type;
import de.tarent.mica.maze.model.WorldDimension;
import de.tarent.mica.maze.util.Random;

/**
 * This class is responsible for breaking down some more walls
 * in the maze that will be generated by the given generator.
 *
 * @author rainu
 */
public class MazePerforater implements MazeGenerator {
	private final MazeGenerator generator;
	private final int removePerc;

	public MazePerforater(MazeGenerator generator, int percentage) {
		this.generator = generator;
		this.removePerc = percentage;
	}

	@Override
	public Maze generateMaze() {
		Maze maze = generator.generateMaze();

		List<Field> breakable = getBreakableWalls(maze);
		int toRemove = calculateRemoveCount(breakable);

		Random r = new Random();
		for(int i=0; i < toRemove; i++){
			Field field = r.choose(breakable);

			maze.putField(new Field(field.getCoord(), Type.WAY));
			breakable.remove(field);
		}

		return maze;
	}

	private int calculateRemoveCount(List<Field> breakable) {
		return (breakable.size() * removePerc) / 100;
	}

	private List<Field> getBreakableWalls(Maze maze) {
		WorldDimension dim = maze.getDimension();
		maze = maze.clone();

		//ignore the border of the maze
		for(int x= dim.getMinX(); x <= dim.getMaxX(); x++){
			maze.removeField(new Coord(x, dim.getMinY()));
			maze.removeField(new Coord(x, dim.getMaxY()));
		}

		for(int y= dim.getMinY(); y <= dim.getMaxY(); y++){
			maze.removeField(new Coord(dim.getMinX(), y));
			maze.removeField(new Coord(dim.getMaxX(), y));
		}

		return maze.getWallFields();
	}
}
